name: Build (Win32 Debug & Release â€” DLLs only for Release, symbols for Debug)

on:
  push:
    branches: [ main ]
    tags: [ '*' ]              # optional: runs on tag pushes
  release:
    types: [published]         # runs when you click "Publish release"
  workflow_dispatch:

permissions:
  contents: write              # required to upload assets to a Release

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 8

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure CMake (Win32)
        run: >
          cmake -S . -B ${{ github.workspace }}\build
          -G "Visual Studio 17 2022"
          -A Win32

      - name: Build (${{ matrix.config }})
        run: cmake --build ${{ github.workspace }}\build --config ${{ matrix.config }} -- /m

      # CI artifacts (for convenience): DLLs + (if present) PDBs. No .lib, no .exe.
      - name: Upload CI artifacts (${{ matrix.config }})
        uses: actions/upload-artifact@v4
        with:
          name: Aurora.Network-win32-${{ matrix.config }}
          path: |
            ${{ github.workspace }}\build\**\${{ matrix.config }}\*.dll
            ${{ github.workspace }}\build\**\${{ matrix.config }}\*.pdb
          if-no-files-found: warn

      # Package for Release publishing:
      # - Release: DLLs only
      # - Debug:   DLLs and PDBs (separate zips)
      - name: Package (${{ matrix.config }})
        if: github.event_name == 'release' && github.event.action == 'published'
        shell: pwsh
        run: |
          $cfg  = "${{ matrix.config }}"
          $root = "${{ github.workspace }}"
          $bld  = "$root\build"

          # Select exact files for this config
          $all  = Get-ChildItem -Path $bld -Recurse -File | Where-Object { $_.FullName -match "\\$cfg\\" }
          $bins = @($all | Where-Object { $_.Extension -ieq ".dll" } | Select-Object -Expand FullName)
          $syms = @($all | Where-Object { $_.Extension -ieq ".pdb" } | Select-Object -Expand FullName)

          New-Item -ItemType Directory -Force -Path "$root\out" | Out-Null

          $zipBin = "$root\out\Aurora.Network-win32-$cfg-binaries.zip"
          $zipSym = "$root\out\Aurora.Network-win32-$cfg-symbols.zip"
          if (Test-Path $zipBin) { Remove-Item $zipBin -Force }
          if (Test-Path $zipSym) { Remove-Item $zipSym -Force }

          # Always create binaries zip from DLLs only
          if ($bins.Count -gt 0) { Compress-Archive -Path $bins -DestinationPath $zipBin -Force }

          # Only create symbols zip for Debug (Release intentionally has no symbols)
          if ($cfg -eq "Debug" -and $syms.Count -gt 0) {
            Compress-Archive -Path $syms -DestinationPath $zipSym -Force
          }

          Write-Host "Packed binaries:"; $bins | ForEach-Object { Write-Host "  $_" }
          Write-Host "Packed symbols:";  if ($cfg -eq "Debug") { $syms | ForEach-Object { Write-Host "  $_" } } else { Write-Host "  (none for Release)" }

      # Upload assets to the GitHub Release
      - name: Upload Debug assets
        if: github.event_name == 'release' && github.event.action == 'published' && matrix.config == 'Debug'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}\out\Aurora.Network-win32-Debug-binaries.zip
            ${{ github.workspace }}\out\Aurora.Network-win32-Debug-symbols.zip

      - name: Upload Release assets
        if: github.event_name == 'release' && github.event.action == 'published' && matrix.config == 'Release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}\out\Aurora.Network-win32-Release-binaries.zip
