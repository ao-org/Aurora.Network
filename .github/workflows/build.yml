name: Build (Win32 Debug & Release — DLLs only; Debug symbols)

on:
  push:
    branches: [ main ]
    tags: [ '*' ]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 8

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure CMake (Win32)
        run: >
          cmake -S . -B ${{ github.workspace }}\build
          -G "Visual Studio 17 2022"
          -A Win32

      - name: Build (${{ matrix.config }})
        run: cmake --build ${{ github.workspace }}\build --config ${{ matrix.config }} -- /m

      - name: Upload CI artifacts (${{ matrix.config }})
        uses: actions/upload-artifact@v4
        with:
          name: Aurora.Network-win32-${{ matrix.config }}
          path: |
            ${{ github.workspace }}\build\**\${{ matrix.config }}\*.dll
            ${{ github.workspace }}\build\**\${{ matrix.config }}\*.pdb
          if-no-files-found: warn

      - name: Remove existing assets
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const release_id = context.payload.release.id;
            const names = [
              'Aurora.Network-win32-Debug-binaries.zip',
              'Aurora.Network-win32-Debug-symbols.zip',
              'Aurora.Network-win32-Release-binaries.zip'
            ];
            const {data: assets} = await github.rest.repos.listReleaseAssets({owner, repo, release_id, per_page: 100});
            for (const a of assets) {
              if (names.includes(a.name)) {
                core.info(`Deleting existing asset: ${a.name}`);
                await github.rest.repos.deleteReleaseAsset({owner, repo, asset_id: a.id});
              }
            }

      - name: Package (${{ matrix.config }})
        if: github.event_name == 'release' && github.event.action == 'published'
        shell: pwsh
        run: |
          $cfg   = "${{ matrix.config }}"
          $root  = "${{ github.workspace }}"
          $bld   = "$root\build"
          $stage = "$root\stage\$cfg"
          $out   = "$root\out"

          # Collect lists (only from this config)
          $all  = Get-ChildItem -Path $bld -Recurse -File | Where-Object { $_.FullName -match "\\$cfg\\" }
          $bins = @($all | Where-Object { $_.Extension -ieq ".dll" } | Select-Object -Expand FullName)
          $syms = @($all | Where-Object { $_.Extension -ieq ".pdb" } | Select-Object -Expand FullName)

          # Clean staging
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue $stage
          New-Item -ItemType Directory -Force -Path "$stage\binaries","$stage\symbols" | Out-Null
          New-Item -ItemType Directory -Force -Path $out | Out-Null

          # Copy ONLY what we want
          foreach ($f in $bins) { Copy-Item $f "$stage\binaries" -Force }
          if ($cfg -eq "Debug") { foreach ($f in $syms) { Copy-Item $f "$stage\symbols" -Force } }

          # Create zips from staging (so .lib can’t sneak in)
          $zipBin = "$out\Aurora.Network-win32-$cfg-binaries.zip"
          $zipSym = "$out\Aurora.Network-win32-$cfg-symbols.zip"
          if (Test-Path $zipBin) { Remove-Item $zipBin -Force }
          if (Test-Path $zipSym) { Remove-Item $zipSym -Force }

          $binFiles = Get-ChildItem "$stage\binaries" -File | Select-Object -Expand FullName
          if ($binFiles) { Compress-Archive -Path $binFiles -DestinationPath $zipBin -Force }

          if ($cfg -eq "Debug") {
            $symFiles = Get-ChildItem "$stage\symbols" -File | Select-Object -Expand FullName
            if ($symFiles) { Compress-Archive -Path $symFiles -DestinationPath $zipSym -Force }
          }

          # Print & verify zip contents (no .lib allowed)
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          function Show-And-VerifyZip([string]$zipPath, [string]$label) {
            if (Test-Path $zipPath) {
              $z = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
              try {
                Write-Host "ZIP ($label): $zipPath"
                foreach ($e in $z.Entries) {
                  Write-Host "  - $($e.FullName)"
                  if ($e.FullName.ToLower().EndsWith('.lib')) {
                    throw "Found .lib in $zipPath: $($e.FullName)"
                  }
                }
              } finally { $z.Dispose() }
            } else {
              Write-Host "ZIP ($label): (not created)"
            }
          }
          Show-And-VerifyZip $zipBin "binaries"
          if ($cfg -eq "Debug") { Show-And-VerifyZip $zipSym "symbols" }

          Write-Host "Binaries staged:"; Get-ChildItem "$stage\binaries" -File | ForEach-Object { Write-Host "  $($_.Name)" }
          if ($cfg -eq "Debug") {
            Write-Host "Symbols staged:"; Get-ChildItem "$stage\symbols" -File | ForEach-Object { Write-Host "  $($_.Name)" }
          } else {
            Write-Host "Symbols staged: (none for Release)"
          }

      - name: Upload Debug assets
        if: github.event_name == 'release' && github.event.action == 'published' && matrix.config == 'Debug'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}\out\Aurora.Network-win32-Debug-binaries.zip
            ${{ github.workspace }}\out\Aurora.Network-win32-Debug-symbols.zip

      - name: Upload Release assets
        if: github.event_name == 'release' && github.event.action == 'published' && matrix.config == 'Release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}\out\Aurora.Network-win32-Release-binaries.zip
