name: Build (Win32 Debug & Release â€” DLLs only + symbols)

on:
  push:
    branches: [ main ]
    tags: [ '*' ]              # optional: runs on tag pushes
  release:
    types: [published]         # runs when you click "Publish release"
  workflow_dispatch:

permissions:
  contents: write              # required to upload assets to a Release

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 8

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure CMake (Win32)
        run: >
          cmake -S . -B ${{ github.workspace }}\build
          -G "Visual Studio 17 2022"
          -A Win32
          -DCMAKE_C_FLAGS_RELEASE="/Zi"
          -DCMAKE_CXX_FLAGS_RELEASE="/Zi"
          -DCMAKE_SHARED_LINKER_FLAGS_RELEASE="/DEBUG:FULL"
          -DCMAKE_EXE_LINKER_FLAGS_RELEASE="/DEBUG:FULL"

      - name: Build (${{ matrix.config }})
        run: cmake --build ${{ github.workspace }}\build --config ${{ matrix.config }} -- /m

      # CI artifacts (helpful for testing): DLLs + PDBs only (no .lib, no .exe)
      - name: Upload CI artifacts (${{ matrix.config }})
        uses: actions/upload-artifact@v4
        with:
          name: Aurora.Network-win32-${{ matrix.config }}
          path: |
            ${{ github.workspace }}\build\**\${{ matrix.config }}\*.dll
            ${{ github.workspace }}\build\**\${{ matrix.config }}\*.pdb
          if-no-files-found: warn

      # On Release publish: package DLLs and symbols separately
      - name: Package (${{ matrix.config }})
        if: github.event_name == 'release' && github.event.action == 'published'
        shell: pwsh
        run: |
          $cfg  = "${{ matrix.config }}"
          $root = "${{ github.workspace }}"
          $bld  = "$root\build"
          $out  = "$root\out\$cfg"
          New-Item -ItemType Directory -Force -Path "$out\binaries","$out\symbols" | Out-Null

          # DLLs only (no .lib, no .exe)
          Get-ChildItem -Path $bld -Recurse -Include *.dll |
            Where-Object { $_.FullName -match "\\$cfg\\" } |
            Copy-Item -Destination "$out\binaries" -Force

          # PDB symbols
          Get-ChildItem -Path $bld -Recurse -Include *.pdb |
            Where-Object { $_.FullName -match "\\$cfg\\" } |
            Copy-Item -Destination "$out\symbols" -Force

          # Zip
          $zipBin = "$root\out\Aurora.Network-win32-$cfg-binaries.zip"
          $zipSym = "$root\out\Aurora.Network-win32-$cfg-symbols.zip"
          if (Test-Path $zipBin) { Remove-Item $zipBin -Force }
          if (Test-Path $zipSym) { Remove-Item $zipSym -Force }
          Compress-Archive -Path "$out\binaries\*" -DestinationPath $zipBin
          Compress-Archive -Path "$out\symbols\*"  -DestinationPath $zipSym

      - name: Upload zips to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}\out\Aurora.Network-win32-Debug-binaries.zip
            ${{ github.workspace }}\out\Aurora.Network-win32-Debug-symbols.zip
            ${{ github.workspace }}\out\Aurora.Network-win32-Release-binaries.zip
            ${{ github.workspace }}\out\Aurora.Network-win32-Release-symbols.zip
