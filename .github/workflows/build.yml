name: Build (Win32 Debug & Release â€” DLLs only + symbols)

on:
  push:
    branches: [ main ]
    tags: [ '*' ]              # optional: runs on tag pushes
  release:
    types: [published]         # runs when you click "Publish release"
  workflow_dispatch:

permissions:
  contents: write              # required to delete/upload release assets

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 8

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure CMake (Win32)
        run: >
          cmake -S . -B ${{ github.workspace }}\build
          -G "Visual Studio 17 2022"
          -A Win32
          -DCMAKE_C_FLAGS_RELEASE="/Zi"
          -DCMAKE_CXX_FLAGS_RELEASE="/Zi"
          -DCMAKE_SHARED_LINKER_FLAGS_RELEASE="/DEBUG:FULL"
          -DCMAKE_EXE_LINKER_FLAGS_RELEASE="/DEBUG:FULL"

      - name: Build (${{ matrix.config }})
        run: cmake --build ${{ github.workspace }}\build --config ${{ matrix.config }} -- /m

      # ----- Release publishing (only when a GitHub Release is published) -----

      # Clean out any previous assets with the same names to avoid stale uploads
      - name: Remove existing assets with same names
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const release_id = context.payload.release.id;
            const names = [
              'Aurora.Network-win32-Debug-binaries.zip',
              'Aurora.Network-win32-Debug-symbols.zip',
              'Aurora.Network-win32-Release-binaries.zip',
              'Aurora.Network-win32-Release-symbols.zip',
            ];
            const {data: assets} = await github.rest.repos.listReleaseAssets({owner, repo, release_id, per_page: 100});
            for (const a of assets) {
              if (names.includes(a.name)) {
                core.info(`Deleting existing asset: ${a.name}`);
                await github.rest.repos.deleteReleaseAsset({owner, repo, asset_id: a.id});
              }
            }

      # Create zips: binaries = DLLs only, symbols = PDBs only
      - name: Package (${{ matrix.config }})
        if: github.event_name == 'release' && github.event.action == 'published'
        shell: pwsh
        run: |
          $cfg  = "${{ matrix.config }}"
          $root = "${{ github.workspace }}"
          $bld  = "$root\build"

          # exact files for this config
          $all  = Get-ChildItem -Path $bld -Recurse -File | Where-Object { $_.FullName -match "\\$cfg\\" }
          $bins = @($all | Where-Object { $_.Extension -ieq ".dll" } | Select-Object -Expand FullName)
          $syms = @($all | Where-Object { $_.Extension -ieq ".pdb" } | Select-Object -Expand FullName)

          # guard: ensure Release has symbols
          if ($cfg -eq "Release" -and -not $syms) {
            throw "No PDBs found for Release. Ensure /Zi and /DEBUG flags are set."
          }

          New-Item -ItemType Directory -Force -Path "$root\out" | Out-Null
          $zipBin = "$root\out\Aurora.Network-win32-$cfg-binaries.zip"
          $zipSym = "$root\out\Aurora.Network-win32-$cfg-symbols.zip"
          if (Test-Path $zipBin) { Remove-Item $zipBin -Force }
          if (Test-Path $zipSym) { Remove-Item $zipSym -Force }

          if ($bins.Count -gt 0) { Compress-Archive -Path $bins -DestinationPath $zipBin -Force }
          if ($syms.Count -gt 0) { Compress-Archive -Path $syms -DestinationPath $zipSym -Force }

          Write-Host "Packed binaries:"; $bins | ForEach-Object { Write-Host "  $_" }
          Write-Host "Packed symbols:";  $syms | ForEach-Object { Write-Host "  $_" }

      - name: Upload zips to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}\out\Aurora.Network-win32-Debug-binaries.zip
            ${{ github.workspace }}\out\Aurora.Network-win32-Debug-symbols.zip
            ${{ github.workspace }}\out\Aurora.Network-win32-Release-binaries.zip
            ${{ github.workspace }}\out\Aurora.Network-win32-Release-symbols.zip
